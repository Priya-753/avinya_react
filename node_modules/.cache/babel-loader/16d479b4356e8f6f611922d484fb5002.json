{"ast":null,"code":"var _jsxFileName = \"/Users/Priya/Documents/Start Up/webapp/src/basicComponents/Base.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport IButton from './button/Button.js';\nimport { Collapse } from 'reactstrap';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst propTypes = {\n  scrollable: PropTypes.bool,\n  dismissible: PropTypes.bool\n};\nconst defaultProps = {\n  dismissible: false,\n  scrollable: false\n};\n\nconst withDismiss = Component => {\n  class Dismiss extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        visible: true\n      };\n    }\n\n    render() {\n      let {\n        dismissible,\n        ...passThroughProps\n      } = this.props;\n\n      if (dismissible) {\n        const dismissButton = /*#__PURE__*/_jsxDEV(IButton, {\n          size: \"sm\",\n          color: passThroughProps.color,\n          close: true,\n          onClick: () => {\n            this.setState({\n              visible: false\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 33\n        }, this);\n\n        passThroughProps.children = _.isArray(passThroughProps.children) ? passThroughProps.children.concat(dismissButton) : [passThroughProps.children, dismissButton];\n      }\n\n      return /*#__PURE__*/_jsxDEV(Collapse, {\n        isOpen: this.state.visible,\n        children: /*#__PURE__*/_jsxDEV(Component, { ...passThroughProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this);\n    }\n\n  }\n\n  Dismiss.propTypes = {\n    dismissible: PropTypes.bool\n  };\n  Dismiss.defaultProps = {\n    dismissible: true\n  };\n  Dismiss.displayName = 'Dismiss';\n  return Dismiss;\n};\n\nconst withToggle = Component => {\n  class Toggle extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.toggle = () => {\n        this.setState({\n          visible: !this.state.visible\n        });\n      };\n\n      this.state = {\n        visible: true\n      };\n    }\n\n    render() {\n      let {\n        toggle,\n        toggleText,\n        ...passThroughProps\n      } = this.props;\n      let toggleButton;\n\n      if (toggle) {\n        toggleButton = /*#__PURE__*/_jsxDEV(IButton, {\n          size: \"sm\",\n          color: passThroughProps.color,\n          onClick: this.toggle,\n          children: [\" \", toggleText || \"Toggle\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 24\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [toggleButton, /*#__PURE__*/_jsxDEV(Collapse, {\n          isOpen: this.state.visible,\n          children: /*#__PURE__*/_jsxDEV(Component, { ...passThroughProps\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this);\n    }\n\n  }\n\n  Toggle.propTypes = {\n    toggle: PropTypes.bool,\n    toggleText: PropTypes.string\n  };\n  Toggle.defaultProps = {\n    toggle: true,\n    toggleText: \"Toggle\"\n  };\n  Toggle.displayName = 'Toggle';\n  return Toggle;\n};\n\nconst withScroll = Component => {\n  class Scroll extends React.Component {\n    constructor(props) {\n      super(props);\n    }\n\n    render() {\n      let {\n        scrollable,\n        ...passThroughProps\n      } = this.props;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Collapse, {\n          isOpen: this.state.visible,\n          children: /*#__PURE__*/_jsxDEV(Component, {\n            className: \"scroll\",\n            ...passThroughProps\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this);\n    }\n\n  }\n\n  Scroll.propTypes = {\n    scrollable: PropTypes.bool\n  };\n  Scroll.defaultProps = {\n    scrollable: true\n  };\n  Scroll.displayName = 'Scroll';\n  return Scroll;\n};\n\nclass IBase extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = () => {\n      this.setState({\n        visible: !this.state.visible\n      });\n    };\n\n    this.state = {\n      visible: true\n    };\n  }\n\n  render(children) {\n    let {\n      toggle,\n      dismissible,\n      scrollable,\n      toggleText,\n      toggleButton,\n      ...attributes\n    } = this.props;\n\n    if (dismissible) {\n      const dismissButton = /*#__PURE__*/_jsxDEV(IButton, {\n        size: \"sm\",\n        color: attributes.color,\n        close: true,\n        onClick: () => {\n          this.setState({\n            visible: false\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 35\n      }, this);\n\n      const newChildren = _.isArray(children.props.children) ? children.props.children.concat(dismissButton) : [children, dismissButton];\n      children = /*#__PURE__*/React.cloneElement(children, {\n        children: newChildren\n      });\n    }\n\n    if (scrollable) {\n      attributes.className = 'scroll';\n    }\n\n    if (toggle) {\n      if (!toggleButton) {\n        toggleButton = /*#__PURE__*/_jsxDEV(IButton, {\n          size: \"sm\",\n          color: attributes.color,\n          onClick: this.toggle,\n          children: [\" \", toggleText || \"Toggle\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 32\n        }, this);\n      } else {\n        toggleButton = /*#__PURE__*/React.cloneElement(toggleButton, {\n          onClick: this.toggle\n        });\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [toggleButton, /*#__PURE__*/_jsxDEV(Collapse, {\n        onExited: () => {\n          if (attributes.onDismiss) {\n            attributes.onDismiss(attributes);\n          }\n        },\n        isOpen: this.state.visible,\n        ...attributes,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nIBase.displayName = 'IBase';\nexport default IBase;","map":{"version":3,"sources":["/Users/Priya/Documents/Start Up/webapp/src/basicComponents/Base.js"],"names":["React","PropTypes","IButton","Collapse","_","propTypes","scrollable","bool","dismissible","defaultProps","withDismiss","Component","Dismiss","constructor","props","state","visible","render","passThroughProps","dismissButton","color","setState","children","isArray","concat","displayName","withToggle","Toggle","toggle","toggleText","toggleButton","string","withScroll","Scroll","IBase","attributes","newChildren","cloneElement","className","onClick","onDismiss"],"mappings":"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","sourcesContent":["import React  from 'react';\nimport PropTypes from 'prop-types';\nimport IButton from './button/Button.js';\nimport { Collapse } from 'reactstrap';\nimport _ from 'lodash';\n\nconst propTypes = {\n  scrollable: PropTypes.bool,\n  dismissible: PropTypes.bool\n};\n\nconst defaultProps = {\n    dismissible: false,\n    scrollable: false\n};\n\nconst withDismiss = (Component) => {\n  class Dismiss extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        visible: true\n      };\n    }\n\n    render() {\n      let {\n          dismissible,\n          ...passThroughProps\n      } = this.props;\n\n      if (dismissible) {\n          const dismissButton = <IButton size=\"sm\" color = {passThroughProps.color} close onClick={() => {this.setState({visible: false});\n              }} />;\n          passThroughProps.children = _.isArray(passThroughProps.children) ? passThroughProps.children.concat(dismissButton) : [passThroughProps.children, dismissButton];\n      }\n\n      return (\n          <Collapse\n              isOpen={this.state.visible}>\n              <Component {...passThroughProps} />\n          </Collapse>\n      );\n    }\n  }\n\n  Dismiss.propTypes = { dismissible: PropTypes.bool };\n  Dismiss.defaultProps = { dismissible: true };\n  Dismiss.displayName = 'Dismiss';\n\n  return Dismiss;\n}\n\nconst withToggle = (Component) => {\n  class Toggle extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        visible: true\n      };\n    }\n\n    toggle = () => {this.setState({visible: !this.state.visible});}\n\n    render() {\n      let {\n          toggle,\n          toggleText,\n          ...passThroughProps\n      } = this.props;\n\n      let toggleButton;\n\n      if (toggle) {\n        toggleButton = <IButton size=\"sm\" color = {passThroughProps.color} onClick={this.toggle} > {toggleText || \"Toggle\"} </IButton>;\n      }\n\n      return (\n          <div>\n          {toggleButton}\n          <Collapse\n              isOpen={this.state.visible}>\n              <Component {...passThroughProps} />\n          </Collapse>\n          </div>\n      );\n    }\n  }\n\n  Toggle.propTypes = {\n    toggle: PropTypes.bool,\n    toggleText: PropTypes.string\n  };\n\n  Toggle.defaultProps = { toggle: true, toggleText: \"Toggle\" };\n  Toggle.displayName = 'Toggle';\n\n  return Toggle;\n}\n\nconst withScroll = (Component) => {\n  class Scroll extends React.Component {\n    constructor(props) {\n      super(props);\n    }\n\n    render() {\n      let {\n          scrollable,\n          ...passThroughProps\n      } = this.props;\n\n      return (\n          <div>\n          <Collapse\n              isOpen={this.state.visible}>\n              <Component className=\"scroll\" {...passThroughProps} />\n          </Collapse>\n          </div>\n      );\n    }\n  }\n\n  Scroll.propTypes = {\n    scrollable: PropTypes.bool\n  };\n\n  Scroll.defaultProps = { scrollable: true};\n  Scroll.displayName = 'Scroll';\n\n  return Scroll;\n}\n\nclass IBase extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { visible: true};\n    }\n\n    toggle = () => {this.setState({visible: !this.state.visible});}\n\n    render(children) {\n        let {\n            toggle,\n            dismissible,\n            scrollable,\n            toggleText,\n            toggleButton,\n            ...attributes\n        } = this.props;\n\n        if (dismissible) {\n            const dismissButton = <IButton size=\"sm\" color = {attributes.color} close onClick={() => {this.setState({visible: false});\n                }} />;\n            const newChildren = _.isArray(children.props.children) ? children.props.children.concat(dismissButton) : [children, dismissButton];\n            children = React.cloneElement(children, {children: newChildren});\n        }\n\n        if (scrollable) {\n            attributes.className = 'scroll';\n        }\n\n        if (toggle) {\n            if (!toggleButton) {\n                toggleButton = <IButton size=\"sm\" color = {attributes.color} onClick={this.toggle} > {toggleText || \"Toggle\"} </IButton>;\n            } else {\n                toggleButton = React.cloneElement(toggleButton, {onClick: this.toggle});\n            }\n        }\n\n        return (\n            <div>\n            {toggleButton}\n            <Collapse\n                onExited={() => { if (attributes.onDismiss) {attributes.onDismiss(attributes)}}}\n                isOpen={this.state.visible} {...attributes}>\n                {children}\n            </Collapse>\n            </div>\n        );\n    }\n}\n\nIBase.displayName = 'IBase';\n\nexport default IBase;\n"]},"metadata":{},"sourceType":"module"}