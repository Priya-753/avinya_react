{"ast":null,"code":"var _jsxFileName = \"/Users/Priya/Documents/Start Up/webapp/src/basicComponents/button/Button.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button as RSButton, ButtonToggle as RSButtonToggle } from 'reactstrap';\nimport * as CONSTANTS from '../constants.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst propTypes = {\n  color: PropTypes.string,\n  type: PropTypes.oneOf([CONSTANTS.CHECKBOX, CONSTANTS.RADIO, CONSTANTS.NORMAL])\n};\nconst defaultProps = {\n  color: 'primary',\n  type: CONSTANTS.NORMAL\n};\n\nclass IButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      active: false,\n      ...this.state\n    };\n  }\n\n  render() {\n    let {\n      color,\n      type,\n      ...attributes\n    } = this.props; // TODO: Check if attributes.children is only string\n\n    if (attributes.onSelected) {\n      attributes.onClick = () => {\n        this.props.onSelected(attributes.children);\n        this.setState({\n          active: !this.state.active\n        });\n      };\n    } else if (attributes.toggle) {\n      return /*#__PURE__*/_jsxDEV(RSButtonToggle, {\n        color: color,\n        ...attributes,\n        children: attributes.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this);\n    } else if (attributes.close) {\n      attributes.className = `btn-${color} position-absolute top-0 end-0`;\n    }\n\n    const button = /*#__PURE__*/_jsxDEV(RSButton, {\n      color: color,\n      active: this.state.active,\n      ...attributes,\n      children: attributes.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this);\n\n    return button;\n  }\n\n}\n\nIButton.propTypes = propTypes;\nIButton.defaultProps = defaultProps;\nIButton.displayName = 'IButton';\nexport default IButton;","map":{"version":3,"sources":["/Users/Priya/Documents/Start Up/webapp/src/basicComponents/button/Button.js"],"names":["React","PropTypes","Button","RSButton","ButtonToggle","RSButtonToggle","CONSTANTS","propTypes","color","string","type","oneOf","CHECKBOX","RADIO","NORMAL","defaultProps","IButton","Component","constructor","props","state","active","render","attributes","onSelected","onClick","children","setState","toggle","close","className","button","displayName"],"mappings":";AAAA,OAAOA,KAAP,MAAmB,OAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAM,IAAIC,QAAnB,EAA6BC,YAAY,IAAIC,cAA7C,QAAmE,YAAnE;AACA,OAAO,KAAKC,SAAZ,MAA2B,iBAA3B;;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAEP,SAAS,CAACQ,MADD;AAEhBC,EAAAA,IAAI,EAAET,SAAS,CAACU,KAAV,CAAgB,CAACL,SAAS,CAACM,QAAX,EAAqBN,SAAS,CAACO,KAA/B,EAAsCP,SAAS,CAACQ,MAAhD,CAAhB;AAFU,CAAlB;AAKA,MAAMC,YAAY,GAAG;AACnBP,EAAAA,KAAK,EAAE,SADY;AAEnBE,EAAAA,IAAI,EAAEJ,SAAS,CAACQ;AAFG,CAArB;;AAKA,MAAME,OAAN,SAAsBhB,KAAK,CAACiB,SAA5B,CAAsC;AAEpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAG,KADA;AAET,SAAG,KAAKD;AAFC,KAAb;AAID;;AAEDE,EAAAA,MAAM,GAAG;AACP,QAAI;AACFd,MAAAA,KADE;AAEFE,MAAAA,IAFE;AAGF,SAAGa;AAHD,QAIA,KAAKJ,KAJT,CADO,CAOP;;AAEA,QAAII,UAAU,CAACC,UAAf,EAA2B;AACvBD,MAAAA,UAAU,CAACE,OAAX,GAAqB,MAAM;AACvB,aAAKN,KAAL,CAAWK,UAAX,CAAsBD,UAAU,CAACG,QAAjC;AACA,aAAKC,QAAL,CAAc;AAACN,UAAAA,MAAM,EAAG,CAAC,KAAKD,KAAL,CAAWC;AAAtB,SAAd;AACH,OAHD;AAIH,KALD,MAOK,IAAIE,UAAU,CAACK,MAAf,EAAuB;AACxB,0BACI,QAAC,cAAD;AACI,QAAA,KAAK,EAAIpB,KADb;AAAA,WAEQe,UAFR;AAAA,kBAIKA,UAAU,CAACG;AAJhB;AAAA;AAAA;AAAA;AAAA,cADJ;AAQH,KATI,MAWA,IAAIH,UAAU,CAACM,KAAf,EAAsB;AACvBN,MAAAA,UAAU,CAACO,SAAX,GAAwB,OAAMtB,KAAM,gCAApC;AACH;;AAED,UAAMuB,MAAM,gBACV,QAAC,QAAD;AACE,MAAA,KAAK,EAAIvB,KADX;AAEE,MAAA,MAAM,EAAI,KAAKY,KAAL,CAAWC,MAFvB;AAAA,SAGME,UAHN;AAAA,gBAKGA,UAAU,CAACG;AALd;AAAA;AAAA;AAAA;AAAA,YADF;;AAUA,WAAOK,MAAP;AACD;;AApDmC;;AAuDtCf,OAAO,CAACT,SAAR,GAAoBA,SAApB;AACAS,OAAO,CAACD,YAAR,GAAuBA,YAAvB;AACAC,OAAO,CAACgB,WAAR,GAAsB,SAAtB;AAEA,eAAehB,OAAf","sourcesContent":["import React  from 'react';\nimport PropTypes from 'prop-types';\nimport { Button as RSButton, ButtonToggle as RSButtonToggle } from 'reactstrap';\nimport * as CONSTANTS from '../constants.js'\n\nconst propTypes = {\n  color: PropTypes.string,\n  type: PropTypes.oneOf([CONSTANTS.CHECKBOX, CONSTANTS.RADIO, CONSTANTS.NORMAL]),\n};\n\nconst defaultProps = {\n  color: 'primary',\n  type: CONSTANTS.NORMAL,\n};\n\nclass IButton extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n        active : false,\n        ...this.state\n    };\n  }\n\n  render() {\n    let {\n      color,\n      type,\n      ...attributes\n    } = this.props;\n\n    // TODO: Check if attributes.children is only string\n\n    if (attributes.onSelected) {\n        attributes.onClick = () => {\n            this.props.onSelected(attributes.children);\n            this.setState({active : !this.state.active})\n        }\n    }\n\n    else if (attributes.toggle) {\n        return (\n            <RSButtonToggle\n                color = {color}\n                {...attributes}\n            >\n                {attributes.children}\n            </RSButtonToggle>\n        )\n    }\n\n    else if (attributes.close) {\n        attributes.className = `btn-${color} position-absolute top-0 end-0`;\n    }\n\n    const button = (\n      <RSButton\n        color = {color}\n        active = {this.state.active}\n        {...attributes}\n      >\n        {attributes.children}\n      </RSButton>\n    );\n\n    return button;\n  }\n}\n\nIButton.propTypes = propTypes;\nIButton.defaultProps = defaultProps;\nIButton.displayName = 'IButton';\n\nexport default IButton;\n"]},"metadata":{},"sourceType":"module"}