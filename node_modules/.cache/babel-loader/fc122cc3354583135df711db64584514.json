{"ast":null,"code":"var _jsxFileName = \"/Users/Priya/Documents/Start Up/webapp/src/basicComponents/button/ButtonGroup.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ButtonGroup as RSButtonGroup } from 'reactstrap';\nimport * as CONSTANTS from '../constants.js';\nimport IBase from '../Base.js';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst propTypes = {\n  selectedButtons: PropTypes.arrayOf(PropTypes.string),\n  type: PropTypes.oneOf([CONSTANTS.CHECKBOX, CONSTANTS.RADIO, CONSTANTS.NORMAL])\n};\nconst defaultProps = {\n  selectedButtons: [],\n  type: CONSTANTS.NORMAL\n};\n\nclass IButtonGroup extends IBase {\n  constructor(props) {\n    super(props);\n\n    this.setSelectedButtons = selectedButton => {\n      let selectedButtons = this.state.selectedButtons;\n\n      switch (this.props.type) {\n        case CONSTANTS.CHECKBOX:\n          const index = _.indexOf(selectedButtons, selectedButton);\n\n          if (index < 0) {\n            selectedButtons.push(selectedButton);\n          } else {\n            selectedButtons.splice(index, 1);\n          }\n\n          break;\n\n        case CONSTANTS.RADIO:\n          selectedButtons = [selectedButton];\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        selectedButtons: selectedButtons\n      });\n    };\n\n    this.state = {\n      selectedButtons: [],\n      ...this.state\n    };\n  }\n\n  render() {\n    let {\n      selectedButtons,\n      ...attributes\n    } = this.props;\n\n    if (attributes.onSelected) {\n      this.props.onSelected(this.state.selectedButtons);\n    }\n\n    const buttonGroup = /*#__PURE__*/_jsxDEV(RSButtonGroup, { ...attributes,\n      children: React.Children.map(this.props.children, child => {\n        return /*#__PURE__*/React.cloneElement(child, {\n          onSelected: this.setSelectedButtons\n        });\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }, this);\n\n    return super.render(buttonGroup);\n  }\n\n}\n\nIButtonGroup.propTypes = propTypes;\nIButtonGroup.defaultProps = defaultProps;\nIButtonGroup.displayName = 'IButtonGroup';\nexport default IButtonGroup;","map":{"version":3,"sources":["/Users/Priya/Documents/Start Up/webapp/src/basicComponents/button/ButtonGroup.js"],"names":["React","PropTypes","ButtonGroup","RSButtonGroup","CONSTANTS","IBase","_","propTypes","selectedButtons","arrayOf","string","type","oneOf","CHECKBOX","RADIO","NORMAL","defaultProps","IButtonGroup","constructor","props","setSelectedButtons","selectedButton","state","index","indexOf","push","splice","setState","render","attributes","onSelected","buttonGroup","Children","map","children","child","cloneElement","displayName"],"mappings":";AAAA,OAAOA,KAAP,MAAmB,OAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAW,IAAIC,aAAxB,QAA6C,YAA7C;AACA,OAAO,KAAKC,SAAZ,MAA2B,iBAA3B;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,CAAP,MAAc,QAAd;;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,eAAe,EAAEP,SAAS,CAACQ,OAAV,CAAkBR,SAAS,CAACS,MAA5B,CADD;AAEhBC,EAAAA,IAAI,EAAEV,SAAS,CAACW,KAAV,CAAgB,CAACR,SAAS,CAACS,QAAX,EAAqBT,SAAS,CAACU,KAA/B,EAAsCV,SAAS,CAACW,MAAhD,CAAhB;AAFU,CAAlB;AAKA,MAAMC,YAAY,GAAG;AACnBR,EAAAA,eAAe,EAAE,EADE;AAEnBG,EAAAA,IAAI,EAAEP,SAAS,CAACW;AAFG,CAArB;;AAKA,MAAME,YAAN,SAA2BZ,KAA3B,CAAiC;AAC7Ba,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAQnBC,kBARmB,GAQGC,cAAD,IAAoB;AACrC,UAAIb,eAAe,GAAG,KAAKc,KAAL,CAAWd,eAAjC;;AACA,cAAQ,KAAKW,KAAL,CAAWR,IAAnB;AACI,aAAKP,SAAS,CAACS,QAAf;AACI,gBAAMU,KAAK,GAAGjB,CAAC,CAACkB,OAAF,CAAUhB,eAAV,EAA2Ba,cAA3B,CAAd;;AACA,cAAIE,KAAK,GAAG,CAAZ,EAAe;AACXf,YAAAA,eAAe,CAACiB,IAAhB,CAAqBJ,cAArB;AACH,WAFD,MAEO;AACHb,YAAAA,eAAe,CAACkB,MAAhB,CAAuBH,KAAvB,EAA8B,CAA9B;AACH;;AACD;;AAEJ,aAAKnB,SAAS,CAACU,KAAf;AACIN,UAAAA,eAAe,GAAG,CAACa,cAAD,CAAlB;AACA;;AAEJ;AACI;AAfR;;AAiBA,WAAKM,QAAL,CAAc;AAACnB,QAAAA,eAAe,EAAEA;AAAlB,OAAd;AACH,KA5BkB;;AAEf,SAAKc,KAAL,GAAa;AACTd,MAAAA,eAAe,EAAE,EADR;AAET,SAAG,KAAKc;AAFC,KAAb;AAIH;;AAwBDM,EAAAA,MAAM,GAAG;AACL,QAAI;AACFpB,MAAAA,eADE;AAEF,SAAGqB;AAFD,QAGA,KAAKV,KAHT;;AAKA,QAAIU,UAAU,CAACC,UAAf,EAA2B;AACnB,WAAKX,KAAL,CAAWW,UAAX,CAAsB,KAAKR,KAAL,CAAWd,eAAjC;AACP;;AAED,UAAMuB,WAAW,gBACf,QAAC,aAAD,OACMF,UADN;AAAA,gBAGG7B,KAAK,CAACgC,QAAN,CAAeC,GAAf,CAAmB,KAAKd,KAAL,CAAWe,QAA9B,EAAwCC,KAAK,IAAI;AACxC,4BAAOnC,KAAK,CAACoC,YAAN,CAAmBD,KAAnB,EAA0B;AAC/BL,UAAAA,UAAU,EAAE,KAAKV;AADc,SAA1B,CAAP;AACyC,OAFlD;AAHH;AAAA;AAAA;AAAA;AAAA,YADF;;AAUA,WAAO,MAAMQ,MAAN,CAAaG,WAAb,CAAP;AACH;;AApD4B;;AAuDjCd,YAAY,CAACV,SAAb,GAAyBA,SAAzB;AACAU,YAAY,CAACD,YAAb,GAA4BA,YAA5B;AACAC,YAAY,CAACoB,WAAb,GAA2B,cAA3B;AAEA,eAAepB,YAAf","sourcesContent":["import React  from 'react';\nimport PropTypes from 'prop-types';\nimport { ButtonGroup as RSButtonGroup } from 'reactstrap';\nimport * as CONSTANTS from '../constants.js'\nimport IBase from '../Base.js'\nimport _ from 'lodash';\n\nconst propTypes = {\n  selectedButtons: PropTypes.arrayOf(PropTypes.string),\n  type: PropTypes.oneOf([CONSTANTS.CHECKBOX, CONSTANTS.RADIO, CONSTANTS.NORMAL])\n};\n\nconst defaultProps = {\n  selectedButtons: [],\n  type: CONSTANTS.NORMAL\n};\n\nclass IButtonGroup extends IBase {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedButtons: [],\n            ...this.state\n        };\n    }\n\n    setSelectedButtons = (selectedButton) => {\n        let selectedButtons = this.state.selectedButtons;\n        switch (this.props.type) {\n            case CONSTANTS.CHECKBOX:\n                const index = _.indexOf(selectedButtons, selectedButton)\n                if (index < 0) {\n                    selectedButtons.push(selectedButton);\n                } else {\n                    selectedButtons.splice(index, 1);\n                }\n                break;\n\n            case CONSTANTS.RADIO:\n                selectedButtons = [selectedButton];\n                break;\n\n            default:\n                break;\n        }\n        this.setState({selectedButtons: selectedButtons});\n    }\n\n    render() {\n        let {\n          selectedButtons,\n          ...attributes\n        } = this.props;\n\n        if (attributes.onSelected) {\n                this.props.onSelected(this.state.selectedButtons);\n        }\n\n        const buttonGroup = (\n          <RSButtonGroup\n            {...attributes}\n          >\n            {React.Children.map(this.props.children, child => {\n                      return React.cloneElement(child, {\n                        onSelected: this.setSelectedButtons })})}\n          </RSButtonGroup>\n        );\n\n        return super.render(buttonGroup);\n    }\n}\n\nIButtonGroup.propTypes = propTypes;\nIButtonGroup.defaultProps = defaultProps;\nIButtonGroup.displayName = 'IButtonGroup';\n\nexport default IButtonGroup;"]},"metadata":{},"sourceType":"module"}