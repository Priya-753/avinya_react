{"ast":null,"code":"var _jsxFileName = \"/Users/Priya/Documents/Start Up/webapp/src/basicComponents/form/FormGroup.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport IBase from '../Base.js';\nimport * as CONSTANTS from '../constants.js';\nimport { InputTypes } from '../utils.js';\nimport IButton from '../button/Button.js';\nimport IButtonGroup from '../button/ButtonGroup.js';\nimport { FormGroup as RSFormGroup, Label, Input, FormText, FormFeedback, CustomInput } from 'reactstrap';\nimport Select from 'react-select';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst propTypes = {\n  type: PropTypes.oneOf(InputTypes),\n  id: PropTypes.string,\n  size: PropTypes.oneOf([CONSTANTS.LARGE, CONSTANTS.SMALL]),\n  label: PropTypes.string,\n  formText: PropTypes.string,\n  formFeedback: PropTypes.string,\n  fileExtensions: PropTypes.array,\n  fileSize: PropTypes.string\n};\nconst defaultProps = {\n  type: CONSTANTS.TEXT,\n  formText: \"Enter input\",\n  formFeedback: \"Wrong\",\n  fileExtensions: [\"jpeg\"],\n  fileSize: \"1MB\"\n};\n\nclass IFormGroup extends IBase {\n  constructor(props) {\n    super(props);\n    this.state = {\n      valid: true,\n      ...this.state\n    };\n  }\n\n  render() {\n    let {\n      type,\n      id,\n      label,\n      size,\n      formText,\n      formFeedback,\n      ...attributes\n    } = this.props;\n    let onChange = undefined;\n\n    if (attributes.onChange) {\n      onChange = attributes.onChange;\n    }\n\n    let input = /*#__PURE__*/_jsxDEV(Input, {\n      type: type,\n      name: id,\n      id: id,\n      valid: this.state.valid,\n      invalid: !this.state.valid,\n      onChange: e => {\n        if (onChange !== undefined) {\n          onChange(e);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, this);\n\n    let options;\n\n    switch (type) {\n      case CONSTANTS.EMAIL:\n        if (onChange === undefined) {\n          onChange = e => {\n            const emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n            const {\n              valid\n            } = this.state;\n\n            if (emailRegex.test(e.target.value)) {\n              this.setState({\n                valid: true\n              });\n            } else {\n              this.setState({\n                valid: false\n              });\n            }\n          };\n        }\n\n        break;\n\n      case CONSTANTS.PASSWORD:\n        if (onChange === undefined) {\n          onChange = e => {\n            const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n            const {\n              valid\n            } = this.state;\n\n            if (passwordRegex.test(e.target.value)) {\n              this.setState({\n                valid: true\n              });\n            } else {\n              this.setState({\n                valid: false\n              });\n            }\n          };\n\n          formFeedback = \"Password must contain minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character\";\n        }\n\n        break;\n\n      case CONSTANTS.SELECT:\n        options = _.map(attributes.options, optionName => {\n          return {\n            label: optionName,\n            value: optionName\n          };\n        });\n        input = /*#__PURE__*/_jsxDEV(Select, {\n          options: options,\n          isSearchabe: true,\n          maxMenuHeight: 50\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this);\n        break;\n\n      case CONSTANTS.MULTI_SELECT:\n        options = _.map(attributes.options, optionName => {\n          return {\n            label: optionName,\n            value: optionName\n          };\n        });\n        input = /*#__PURE__*/_jsxDEV(Select, {\n          options: options,\n          isSearchabe: true,\n          isMulti: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this);\n        break;\n\n      case CONSTANTS.FILE:\n        if (onChange === undefined) {\n          onChange = e => {\n            if (e.target.files.length > 0) {\n              let fileNameParts = e.target.files[0].name.split(\".\");\n              let fileExtension = fileNameParts[fileNameParts.length - 1];\n              let fileSize = e.target.files[0].size;\n              let allowedExtensions = attributes.fileExtensions;\n              let allowedSize = attributes.fileSize;\n\n              if (_.endsWith(allowedSize, \"KB\")) {\n                allowedSize = allowedSize.replace(\"KB\", '') * 1024;\n              } else if (_.endsWith(allowedSize, \"MB\")) {\n                allowedSize = allowedSize.replace(\"MB\", '') * 1048576;\n              } else if (_.endsWith(allowedSize, \"GB\")) {\n                allowedSize = allowedSize.replace(\"GB\", '') * 1073741824;\n              }\n\n              if (_.indexOf(allowedExtensions, fileExtension) < 0) {\n                this.setState({\n                  valid: false\n                });\n              } else if (fileSize > allowedSize) {\n                this.setState({\n                  valid: false\n                });\n              } else {\n                this.setState({\n                  valid: true\n                });\n              }\n            }\n          };\n\n          formFeedback = \"Please upload files having extensions \" + attributes.fileExtensions + \" and of max size \" + attributes.fileSize;\n        }\n\n        break;\n\n      case CONSTANTS.URL:\n        if (onChange === undefined) {\n          onChange = e => {\n            const urlRegex = /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/;\n            const {\n              valid\n            } = this.state;\n\n            if (urlRegex.test(e.target.value)) {\n              this.setState({\n                valid: true\n              });\n            } else {\n              this.setState({\n                valid: false\n              });\n            }\n          };\n        }\n\n        break;\n    }\n\n    const formGroup = /*#__PURE__*/_jsxDEV(RSFormGroup, {\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        for: id,\n        children: [\" \", label, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 12\n      }, this), input, /*#__PURE__*/_jsxDEV(FormFeedback, {\n        invalid: !this.state.valid,\n        children: [\" \", formFeedback, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(FormText, {\n        color: \"muted\",\n        children: [\" \", formText, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }, this);\n\n    return super.render(formGroup);\n  }\n\n}\n\nIFormGroup.propTypes = propTypes;\nIFormGroup.defaultProps = defaultProps;\nIFormGroup.displayName = 'IFormGroup';\nexport default IFormGroup;","map":{"version":3,"sources":["/Users/Priya/Documents/Start Up/webapp/src/basicComponents/form/FormGroup.js"],"names":["React","PropTypes","IBase","CONSTANTS","InputTypes","IButton","IButtonGroup","FormGroup","RSFormGroup","Label","Input","FormText","FormFeedback","CustomInput","Select","_","propTypes","type","oneOf","id","string","size","LARGE","SMALL","label","formText","formFeedback","fileExtensions","array","fileSize","defaultProps","TEXT","IFormGroup","constructor","props","state","valid","render","attributes","onChange","undefined","input","e","options","EMAIL","emailRegex","test","target","value","setState","PASSWORD","passwordRegex","SELECT","map","optionName","MULTI_SELECT","FILE","files","length","fileNameParts","name","split","fileExtension","allowedExtensions","allowedSize","endsWith","replace","indexOf","URL","urlRegex","formGroup","displayName"],"mappings":"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","sourcesContent":["import React  from 'react';\nimport PropTypes from 'prop-types';\nimport IBase from '../Base.js'\nimport * as CONSTANTS from '../constants.js'\nimport { InputTypes } from '../utils.js'\nimport IButton from '../button/Button.js'\nimport IButtonGroup from '../button/ButtonGroup.js'\nimport { FormGroup as RSFormGroup, Label, Input, FormText, FormFeedback, CustomInput } from 'reactstrap';\nimport Select from 'react-select';\nimport _ from 'lodash';\n\nconst propTypes = {\n    type: PropTypes.oneOf(InputTypes),\n    id: PropTypes.string,\n    size: PropTypes.oneOf([CONSTANTS.LARGE, CONSTANTS.SMALL]),\n    label: PropTypes.string,\n    formText: PropTypes.string,\n    formFeedback: PropTypes.string,\n    fileExtensions: PropTypes.array,\n    fileSize: PropTypes.string\n};\n\nconst defaultProps = {\n    type: CONSTANTS.TEXT,\n    formText: \"Enter input\",\n    formFeedback: \"Wrong\",\n    fileExtensions: [\"jpeg\"],\n    fileSize: \"1MB\"\n};\n\nclass IFormGroup extends IBase {\n\n  constructor(props) {\n      super(props);\n      this.state = {\n          valid : true,\n          ...this.state\n      };\n  }\n\n  render() {\n    let {\n      type,\n      id,\n      label,\n      size,\n      formText,\n      formFeedback,\n      ...attributes\n    } = this.props;\n\n    let onChange = undefined;\n    if (attributes.onChange) {\n        onChange = attributes.onChange;\n    }\n\n    let input = <Input type={type} name={id} id={id} valid={this.state.valid} invalid={!this.state.valid} onChange={(e) => {\n                                               if (onChange !== undefined) {onChange(e);}}}/>;\n    let options;\n\n    switch (type)\n    {\n        case CONSTANTS.EMAIL:\n            if (onChange === undefined) {\n                onChange = (e) => {\n                    const emailRegex =\n                      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n                    const { valid } = this.state;\n                    if (emailRegex.test(e.target.value)) {\n                        this.setState({ valid: true });\n                    } else {\n                        this.setState({ valid: false });\n                    }\n                }\n            }\n            break;\n\n        case CONSTANTS.PASSWORD:\n            if (onChange === undefined) {\n                onChange = (e) => {\n                    const passwordRegex =\n                      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n                    const { valid } = this.state;\n                    if (passwordRegex.test(e.target.value)) {\n                        this.setState({ valid: true });\n                    } else {\n                        this.setState({ valid: false });\n                    }\n                }\n                formFeedback = \"Password must contain minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character\";\n            }\n            break;\n\n        case CONSTANTS.SELECT:\n            options = _.map(attributes.options, (optionName) => {\n                                return {label: optionName, value: optionName}\n                              });\n            input = <Select options={options} isSearchabe maxMenuHeight={50}/>\n            break;\n        case CONSTANTS.MULTI_SELECT:\n            options = _.map(attributes.options, (optionName) => {\n                                return {label: optionName, value: optionName}\n                              });\n            input = <Select options={options} isSearchabe isMulti/>\n            break;\n        case CONSTANTS.FILE:\n            if (onChange === undefined) {\n                onChange = (e) => {\n                if (e.target.files.length > 0) {\n                    let fileNameParts = e.target.files[0].name.split(\".\");\n                    let fileExtension = fileNameParts[fileNameParts.length - 1];\n                    let fileSize = e.target.files[0].size;\n                    let allowedExtensions = attributes.fileExtensions;\n                    let allowedSize = attributes.fileSize;\n                    if (_.endsWith(allowedSize, \"KB\")) {\n                        allowedSize = allowedSize.replace(\"KB\", '') * 1024;\n                    } else if (_.endsWith(allowedSize, \"MB\")) {\n                        allowedSize = allowedSize.replace(\"MB\", '') * 1048576;\n                    } else if (_.endsWith(allowedSize, \"GB\")) {\n                        allowedSize = allowedSize.replace(\"GB\", '') * 1073741824;\n                    }\n                    if (_.indexOf(allowedExtensions, fileExtension) < 0) {\n                        this.setState({valid: false})\n                    } else if (fileSize > allowedSize) {\n                        this.setState({valid: false})\n                    } else {\n                        this.setState({valid: true})\n                    }\n                }}\n                formFeedback = \"Please upload files having extensions \" + attributes.fileExtensions + \" and of max size \" + attributes.fileSize;\n            }\n            break;\n        case CONSTANTS.URL:\n            if (onChange === undefined) {\n                onChange = (e) => {\n                    const urlRegex =\n                      /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/;\n                    const { valid } = this.state;\n                    if (urlRegex.test(e.target.value)) {\n                        this.setState({ valid: true });\n                    } else {\n                        this.setState({ valid: false });\n                    }\n                }\n            }\n            break;\n    }\n\n    const formGroup = (\n        <RSFormGroup>\n           <Label for={id}> {label} </Label>\n           {input}\n           <FormFeedback invalid={!this.state.valid}> {formFeedback} </FormFeedback>\n           <FormText color=\"muted\"> {formText} </FormText>\n        </RSFormGroup>\n    );\n\n    return super.render(formGroup);\n  }\n}\n\nIFormGroup.propTypes = propTypes;\nIFormGroup.defaultProps = defaultProps;\nIFormGroup.displayName = 'IFormGroup';\n\nexport default IFormGroup;"]},"metadata":{},"sourceType":"module"}