{"ast":null,"code":"var _jsxFileName = \"/Users/Priya/Documents/Start Up/webapp/src/basicComponents/Base.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport IButton from './button/Button.js';\nimport { Collapse } from 'reactstrap';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst propTypes = {\n  scrollable: PropTypes.bool,\n  dismissible: PropTypes.bool\n};\nconst defaultProps = {\n  dismissible: false,\n  scrollable: false\n};\n\nclass IBase extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = () => {\n      this.setState({\n        visible: !this.state.visible\n      });\n    };\n\n    this.state = {\n      visible: true\n    };\n  }\n\n  render(children) {\n    let { ...attributes\n    } = this.props;\n    let toggleButton = null;\n\n    if (attributes.dismissible) {\n      const dismissButton = /*#__PURE__*/_jsxDEV(IButton, {\n        size: \"sm\",\n        color: attributes.color,\n        close: true,\n        onClick: () => {\n          this.setState({\n            visible: false\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 35\n      }, this);\n\n      const newChildren = _.isArray(children.props.children) ? children.props.children.concat(dismissButton) : [children, dismissButton];\n      children = /*#__PURE__*/React.cloneElement(children, {\n        children: newChildren\n      });\n    }\n\n    if (attributes.scrollable) {\n      attributes.className = 'scroll';\n    }\n\n    if (attributes.toggle) {\n      if (!attributes.toggleButton) {\n        attributes.toggleButton = /*#__PURE__*/_jsxDEV(IButton, {\n          size: \"sm\",\n          color: attributes.color,\n          onClick: () => {\n            this.setState({\n              visible: !this.state.visible\n            });\n          },\n          children: \" Toggle \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 43\n        }, this);\n      } else {\n        attributes.toggleButton = /*#__PURE__*/React.cloneElement(attributes.toggleButton, {\n          onClick: this.toggle\n        });\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [attributes.toggleButton, /*#__PURE__*/_jsxDEV(Collapse, {\n        onExited: () => {\n          if (attributes.onDismiss) {\n            attributes.onDismiss(attributes);\n          }\n        },\n        isOpen: this.state.visible,\n        ...attributes,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nIBase.displayName = 'IBase';\nexport default IBase;","map":{"version":3,"sources":["/Users/Priya/Documents/Start Up/webapp/src/basicComponents/Base.js"],"names":["React","PropTypes","IButton","Collapse","_","propTypes","scrollable","bool","dismissible","defaultProps","IBase","Component","constructor","props","toggle","setState","visible","state","render","children","attributes","toggleButton","dismissButton","color","newChildren","isArray","concat","cloneElement","className","onClick","onDismiss","displayName"],"mappings":"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","sourcesContent":["import React  from 'react';\nimport PropTypes from 'prop-types';\nimport IButton from './button/Button.js';\nimport { Collapse } from 'reactstrap';\nimport _ from 'lodash';\n\nconst propTypes = {\n  scrollable: PropTypes.bool,\n  dismissible: PropTypes.bool\n};\n\nconst defaultProps = {\n    dismissible: false,\n    scrollable: false\n};\n\nclass IBase extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { visible: true};\n    }\n\n    toggle = () => {this.setState({visible: !this.state.visible});}\n\n    render(children) {\n        let {\n            ...attributes\n        } = this.props;\n        let toggleButton = null;\n\n        if (attributes.dismissible) {\n            const dismissButton = <IButton size=\"sm\" color = {attributes.color} close onClick={() => {this.setState({visible: false});\n                }} />;\n            const newChildren = _.isArray(children.props.children) ? children.props.children.concat(dismissButton) : [children, dismissButton];\n            children = React.cloneElement(children, {children: newChildren});\n        }\n\n        if (attributes.scrollable) {\n            attributes.className = 'scroll';\n        }\n\n        if (attributes.toggle) {\n            if (!attributes.toggleButton) {\n                attributes.toggleButton = <IButton size=\"sm\" color = {attributes.color} onClick={() => {this.setState({visible: !this.state.visible});\n                                                                            }} > Toggle </IButton>;\n            } else {\n                attributes.toggleButton = React.cloneElement(attributes.toggleButton, {onClick: this.toggle});\n            }\n        }\n\n        return (\n            <div>\n            {attributes.toggleButton}\n            <Collapse\n                onExited={() => { if (attributes.onDismiss) {attributes.onDismiss(attributes)}}}\n                isOpen={this.state.visible} {...attributes}>\n                {children}\n            </Collapse>\n            </div>\n        );\n    }\n}\n\nIBase.displayName = 'IBase';\n\nexport default IBase;\n"]},"metadata":{},"sourceType":"module"}