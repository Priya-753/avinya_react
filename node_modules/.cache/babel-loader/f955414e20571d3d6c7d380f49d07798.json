{"ast":null,"code":"var _jsxFileName = \"/Users/Priya/Documents/Start Up/webapp/src/basicComponents/dropdown/Dropdown.js\";\nimport React from \"react\";\nimport PropTypes from 'prop-types';\nimport IBase from '../Base.js';\nimport { Dropdown, DropdownItem, DropdownMenu, DropdownToggle, NavLink } from \"reactstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.string,\n  direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\n  status: PropTypes.oneOf(['disabled', 'header', 'divider', 'text'])\n};\nconst defaultProps = {\n  color: 'primary',\n  size: 'lg',\n  direction: 'down',\n  status: 'text'\n};\n\nclass IDropdown extends IBase {\n  constructor(props) {\n    super(props);\n\n    this.toggleDropDown = () => {\n      this.setState({\n        dropdownOpen: !this.state.dropdownOpen\n      });\n    };\n\n    this.toggle = this.toggle.bind(this);\n    this.changeValue = this.changeValue.bind(this);\n    this.state = {\n      dropDownValue: props.actions.length > 0 ? props.actions[0].name : \"No options\",\n      dropdownOpen: false,\n      ...this.state\n    };\n  }\n\n  changeValue(e) {\n    this.setState({\n      dropDownValue: e.currentTarget.textContent\n    });\n  }\n\n  render() {\n    let {\n      color,\n      size,\n      direction,\n      nav,\n      ...attributes\n    } = this.props;\n    const dropdownToggle = nav ? /*#__PURE__*/_jsxDEV(DropdownToggle, {\n      caret: true,\n      color: color,\n      className: \"nav-link\",\n      children: \"Hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(DropdownToggle, {\n      caret: true,\n      color: color,\n      size: size,\n      children: this.state.dropDownValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this);\n\n    const dropdown = /*#__PURE__*/_jsxDEV(Dropdown, {\n      isOpen: this.state.dropdownOpen,\n      toggle: this.toggleDropDown,\n      direction: direction,\n      children: [dropdownToggle, /*#__PURE__*/_jsxDEV(DropdownMenu, {\n        children: this.props.actions.map(action => {\n          const itemName = nav ? /*#__PURE__*/_jsxDEV(NavLink, {\n            href: \"/\",\n            children: action.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 49\n          }, this) : action.name;\n\n          if (action.status === 'header') {\n            return /*#__PURE__*/_jsxDEV(DropdownItem, {\n              id: action.id,\n              onClick: action.onClick || this.changeValue,\n              header: true,\n              children: \" itemName \"\n            }, action.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 36\n            }, this);\n          } else if (action.status === 'divider') {\n            return /*#__PURE__*/_jsxDEV(DropdownItem, {\n              divider: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 36\n            }, this);\n          } else if (action.status === 'disabled') {\n            return /*#__PURE__*/_jsxDEV(DropdownItem, {\n              id: action.id,\n              onClick: action.onClick || this.changeValue,\n              disabled: true,\n              children: \" itemName \"\n            }, action.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 36\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(DropdownItem, {\n              id: action.id,\n              onClick: action.onClick || this.changeValue,\n              children: \" itemName \"\n            }, action.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 36\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n\n    return super.render(dropdown);\n  }\n\n}\n\nIDropdown.propTypes = propTypes;\nIDropdown.defaultProps = defaultProps;\nIDropdown.displayName = 'IDropdown';\nexport default IDropdown;","map":{"version":3,"sources":["/Users/Priya/Documents/Start Up/webapp/src/basicComponents/dropdown/Dropdown.js"],"names":["React","PropTypes","IBase","Dropdown","DropdownItem","DropdownMenu","DropdownToggle","NavLink","propTypes","color","string","size","direction","oneOf","status","defaultProps","IDropdown","constructor","props","toggleDropDown","setState","dropdownOpen","state","toggle","bind","changeValue","dropDownValue","actions","length","name","e","currentTarget","textContent","render","nav","attributes","dropdownToggle","dropdown","map","action","itemName","id","onClick","displayName"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from 'prop-types';\nimport IBase from '../Base.js'\nimport {Dropdown, DropdownItem, DropdownMenu, DropdownToggle, NavLink} from \"reactstrap\";\n\nconst propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.string,\n  direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\n  status: PropTypes.oneOf(['disabled', 'header', 'divider', 'text'])\n};\n\nconst defaultProps = {\n  color: 'primary',\n  size: 'lg',\n  direction: 'down',\n  status: 'text'\n};\n\nclass IDropdown extends IBase {\n    constructor(props) {\n        super(props);\n        this.toggle = this.toggle.bind(this);\n        this.changeValue = this.changeValue.bind(this);\n        this.state = {\n            dropDownValue: props.actions.length > 0 ? props.actions[0].name : \"No options\",\n            dropdownOpen: false,\n            ...this.state\n        };\n    }\n\n    toggleDropDown = () => {this.setState({dropdownOpen: !this.state.dropdownOpen});}\n\n    changeValue(e) {\n        this.setState({dropDownValue: e.currentTarget.textContent});\n    }\n\n    render() {\n        let {\n              color,\n              size,\n              direction,\n              nav,\n              ...attributes\n            } = this.props;\n\n        const dropdownToggle = nav ? (\n            <DropdownToggle caret color={color} className=\"nav-link\">\n               Hello\n            </DropdownToggle>\n        ) : (\n            <DropdownToggle caret color={color} size={size}>\n                {this.state.dropDownValue}\n            </DropdownToggle>\n        );\n        const dropdown = (\n            <Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggleDropDown} direction={direction}>\n                {dropdownToggle}\n                <DropdownMenu>\n                    {this.props.actions.map(action => {\n                        const itemName = nav ? (<NavLink href=\"/\">{action.name}</NavLink>) : (action.name);\n                        if (action.status === 'header') {\n                            return <DropdownItem id={action.id} key={action.id} onClick={action.onClick || this.changeValue} header> itemName </DropdownItem>\n                        } else if (action.status === 'divider') {\n                            return <DropdownItem divider />;\n                        } else if (action.status === 'disabled') {\n                            return <DropdownItem id={action.id} key={action.id} onClick={action.onClick || this.changeValue} disabled> itemName </DropdownItem>\n                        } else {\n                            return <DropdownItem id={action.id} key={action.id} onClick={action.onClick || this.changeValue} > itemName </DropdownItem>\n                        }\n                    })}\n                </DropdownMenu>\n            </Dropdown>\n        );\n\n        return super.render(dropdown);\n    }\n}\n\nIDropdown.propTypes = propTypes;\nIDropdown.defaultProps = defaultProps;\nIDropdown.displayName = 'IDropdown';\n\nexport default IDropdown;"]},"metadata":{},"sourceType":"module"}