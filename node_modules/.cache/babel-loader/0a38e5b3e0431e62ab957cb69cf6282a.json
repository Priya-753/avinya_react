{"ast":null,"code":"var _jsxFileName = \"/Users/Priya/Documents/Start Up/webapp/src/basicComponents/Base.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport IButton from './button/Button.js';\nimport { Collapse } from 'reactstrap';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst propTypes = {\n  scrollable: PropTypes.bool,\n  dismissible: PropTypes.bool\n};\nconst defaultProps = {\n  dismissible: false,\n  scrollable: false\n};\n\nclass IBase extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = () => {\n      this.setState({\n        visible: !this.state.visible\n      });\n    };\n\n    this.state = {\n      visible: true\n    };\n  }\n\n  render(children) {\n    let {\n      toggle,\n      dismissible,\n      scrollable,\n      toggleText,\n      toggleButton,\n      ...attributes\n    } = this.props;\n\n    if (dismissible) {\n      const dismissButton = /*#__PURE__*/_jsxDEV(IButton, {\n        size: \"sm\",\n        color: attributes.color,\n        close: true,\n        onClick: () => {\n          this.setState({\n            visible: false\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 35\n      }, this);\n\n      const newChildren = _.isArray(children.props.children) ? children.props.children.concat(dismissButton) : [children, dismissButton];\n      children = /*#__PURE__*/React.cloneElement(children, {\n        children: newChildren\n      });\n    }\n\n    if (scrollable) {\n      attributes.className = 'scroll';\n    }\n\n    if (toggle) {\n      if (!toggleButton) {\n        toggleButton = /*#__PURE__*/_jsxDEV(IButton, {\n          size: \"sm\",\n          color: attributes.color,\n          onClick: this.toggle,\n          children: [\" \", toggleText || \"Toggle\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 32\n        }, this);\n      } else {\n        toggleButton = /*#__PURE__*/React.cloneElement(toggleButton, {\n          onClick: this.toggle\n        });\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [toggleButton, /*#__PURE__*/_jsxDEV(Collapse, {\n        onExited: () => {\n          if (attributes.onDismiss) {\n            attributes.onDismiss(attributes);\n          }\n        },\n        isOpen: this.state.visible,\n        ...attributes,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nIBase.displayName = 'IBase';\nexport default IBase;","map":{"version":3,"sources":["/Users/Priya/Documents/Start Up/webapp/src/basicComponents/Base.js"],"names":["React","PropTypes","IButton","Collapse","_","propTypes","scrollable","bool","dismissible","defaultProps","IBase","Component","constructor","props","toggle","setState","visible","state","render","children","toggleText","toggleButton","attributes","dismissButton","color","newChildren","isArray","concat","cloneElement","className","onClick","onDismiss","displayName"],"mappings":"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","sourcesContent":["import React  from 'react';\nimport PropTypes from 'prop-types';\nimport IButton from './button/Button.js';\nimport { Collapse } from 'reactstrap';\nimport _ from 'lodash';\n\nconst propTypes = {\n  scrollable: PropTypes.bool,\n  dismissible: PropTypes.bool\n};\n\nconst defaultProps = {\n    dismissible: false,\n    scrollable: false\n};\n\nclass IBase extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { visible: true};\n    }\n\n    toggle = () => {this.setState({visible: !this.state.visible});}\n\n    render(children) {\n        let {\n            toggle,\n            dismissible,\n            scrollable,\n            toggleText,\n            toggleButton,\n            ...attributes\n        } = this.props;\n\n        if (dismissible) {\n            const dismissButton = <IButton size=\"sm\" color = {attributes.color} close onClick={() => {this.setState({visible: false});\n                }} />;\n            const newChildren = _.isArray(children.props.children) ? children.props.children.concat(dismissButton) : [children, dismissButton];\n            children = React.cloneElement(children, {children: newChildren});\n        }\n\n        if (scrollable) {\n            attributes.className = 'scroll';\n        }\n\n        if (toggle) {\n            if (!toggleButton) {\n                toggleButton = <IButton size=\"sm\" color = {attributes.color} onClick={this.toggle} > {toggleText || \"Toggle\"} </IButton>;\n            } else {\n                toggleButton = React.cloneElement(toggleButton, {onClick: this.toggle});\n            }\n        }\n\n        return (\n            <div>\n            {toggleButton}\n            <Collapse\n                onExited={() => { if (attributes.onDismiss) {attributes.onDismiss(attributes)}}}\n                isOpen={this.state.visible} {...attributes}>\n                {children}\n            </Collapse>\n            </div>\n        );\n    }\n}\n\nIBase.displayName = 'IBase';\n\nexport default IBase;\n"]},"metadata":{},"sourceType":"module"}